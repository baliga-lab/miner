#!/usr/bin/env python

import argparse
import pandas as pd
import numpy as np
import json
import sys
import os
import matplotlib.pyplot as plt

from miner import miner

DESCRIPTION = """miner-subtypes - MINER compute sample subtypes"""

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=DESCRIPTION)
    parser.add_argument('expfile', help="input matrix")
    parser.add_argument('mapfile', help="identifier mapping file")
    parser.add_argument('regulons', help="regulons JSON file")
    parser.add_argument('outdir', help="output directory")
    args = parser.parse_args()

    if not os.path.exists(args.regulons):
        sys.exit("regulons file not found")

    if not os.path.exists(args.outdir):
        os.makedirs(args.outdir)
    exp_data = pd.read_csv(args.expfile, index_col=0, header=0)
    exp_data, conv_table = miner.identifierConversion(exp_data, args.mapfile)
    exp_data = miner.zscore(exp_data)
    bkgd = miner.backgroundDf(exp_data)

    with open(args.regulons) as infile:
        regulons = json.load(infile)
    regulon_modules, regulon_df = miner.regulonDictionary(regulons)
    overexpressed_members = miner.biclusterMembershipDictionary(regulon_modules, bkgd, label=2)
    overexpressed_members_matrix = miner.membershipToIncidence(overexpressed_members,
                                                               exp_data)
    underexpressed_members = miner.biclusterMembershipDictionary(regulon_modules, bkgd, label=0)
    underexpressed_members_matrix = miner.membershipToIncidence(underexpressed_members,
                                                                exp_data)

    sample_dictionary = overexpressed_members
    sample_matrix = overexpressed_members_matrix

    similarity_clusters = miner.f1Decomposition(sample_dictionary, thresholdSFM=0.1)
    initial_classes = [i for i in similarity_clusters if len(i)>4]

    sample_freq_matrix = miner.sampleCoincidenceMatrix(sample_dictionary,
                                                       freqThreshold=0.333,
                                                       frequencies=True) #0.333
    similarity_matrix = sample_freq_matrix * sample_freq_matrix.T
    miner.plotSimilarity(similarity_matrix,
                         np.hstack(initial_classes), vmin=0, vmax=0.5,
                         title="Similarity matrix", xlabel="Samples",
                         ylabel="Samples", fontsize=14, figsize=(7,7),
                         savefig=os.path.join(args.outdir,
                                              "similarityMatrix_regulons.pdf"))


    centroid_clusters, centroid_matrix = miner.centroidExpansion(initial_classes,
                                                                 sample_matrix,
                                                                 f1Threshold = 0.1,
                                                                 returnCentroids=True) #0.3

    centroid_matrix.to_csv(os.path.join(args.outdir, "centroids.csv"))
    unmapped = list(sample_matrix.columns[np.where(sample_matrix.sum(axis=0)==0)[0]])
    mapped_samples = [i for i in np.hstack(centroid_clusters) if i not in unmapped]

    miner.plotSimilarity(similarity_matrix, mapped_samples,
                         vmin=0, vmax=0.333, title="Similarity matrix",
                         xlabel="Samples", ylabel="Samples", fontsize=14,
                         figsize=(7,7),
                         savefig=os.path.join(args.outdir,"centroidClusters_regulons.pdf"))

    mapped_clusters = miner.mapExpressionToNetwork(centroid_matrix, sample_matrix,
                                                   threshold = 0.05)
    ordered_overexpressed_members = miner.orderMembership(centroid_matrix,
                                                          sample_matrix,
                                                          mapped_clusters,
                                                          ylabel="Modules",
                                                          resultsDirectory=args.outdir)

    ordered_dm = miner.plotDifferentialMatrix(sample_matrix,
                                              underexpressed_members_matrix,
                                              ordered_overexpressed_members,
                                              cmap="bwr",aspect="auto",
                                              saveFile=os.path.join(args.outdir, "centroid_clusters_heatmap.pdf"))


    difference_complete = overexpressed_members_matrix - underexpressed_members_matrix
    programs, states = miner.mosaic(dfr=ordered_dm, clusterList=centroid_clusters,
                                    minClusterSize_x=5, minClusterSize_y=5,
                                    allow_singletons=False, max_groups=50,
                                    saveFile=os.path.join(args.outdir, "mosaic_heatmap.pdf"),
                                    random_state=12)

    #print(regulon_modules)
    # transcriptionalPrograms uses a feature of pandas that does not always
    # exist (pandas.core.indexes), my solution was to patch the problem
    # with an exception handler
    transcriptional_programs, program_regulons = miner.transcriptionalPrograms(programs,
                                                                               regulon_modules)


    groups = [states[i]
              for i in range(len(states))
              if len(states[i]) >= int(np.ceil(0.01*exp_data.shape[1]))]

    program_list = [program_regulons[("").join(["TP",str(i)])]
                    for i in range(len(program_regulons))]
    print('sample coverage within sufficiently large states: {:.1f}%'.format(100 * float(len(np.hstack(groups))) / exp_data.shape[1]))
    if not os.path.isdir(os.path.join(args.outdir,"transcriptional_programs_coexpressionModules")):
        os.mkdir(os.path.join(args.outdir,"transcriptional_programs_coexpressionModules"))

    for tp in transcriptional_programs.keys():
        np.savetxt(os.path.join(args.outdir,
                                "transcriptional_programs_coexpressionModules",
                                (".").join([tp,"txt"])),
                   transcriptional_programs[tp], fmt="%1.50s")

    states_df = miner.reduceModules(df=ordered_dm, programs=program_list,
                                    states=states,
                                    stateThreshold=0.65,
                                    saveFile=os.path.join(args.outdir,"transcriptional_programs_vs_samples.pdf"))
    programs_vs_states = miner.programsVsStates(states_df, states,
                                                filename=os.path.join(args.outdir,
                                                                      "programs_vs_states.pdf"))
    miner.tsne(exp_data, perplexity=15, n_components=2, n_iter=1000,
               plotOnly=True, plotColor="red", alpha=0.4)

    df_for_tsne = ordered_dm.copy()
    x_embedded = miner.tsne(df_for_tsne, perplexity=12, n_components=2,
                            n_iter=1000, plotOnly=None, plotColor="blue", alpha=0.2)
    tsne_df = pd.DataFrame(x_embedded)
    tsne_df.index = df_for_tsne.columns
    tsne_df.columns = ["tsne1","tsne2"]


    nsd2, maf, ccnd1, csk1b, ikzf1, ikzf3, tp53, e2f1, ets1, phf19 = ["ENSG00000109685","ENSG00000178573","ENSG00000110092","ENSG00000173207","ENSG00000185811","ENSG00000161405","ENSG00000141510","ENSG00000101412","ENSG00000134954","ENSG00000119403"]

    target = tp53
    target_expression = np.array(exp_data.loc[target, tsne_df.index])

    plt.scatter(tsne_df.iloc[:,0], tsne_df.iloc[:,1], cmap="bwr", c=target_expression, alpha=0.65)
    plt.savefig(os.path.join(args.outdir,("").join(["labeled_tsne_", target,
                                                    "_overlay_o2.pdf"])),bbox_inches="tight")

    num_clusters = 4

    # Are the clusters separated how you thought? If not, change the random_state
    # to a different number and retry
    random_state = 1

    clusters, labels, centroids = miner.kmeans(tsne_df, numClusters=num_clusters,
                                               random_state=random_state)

    # overlay cluster labels. WW: Vega20 instead of tab20 because it does not exist
    # at my system
    try:
        plt.scatter(tsne_df.iloc[:,0], tsne_df.iloc[:,1], cmap="tab20", c=labels, alpha=0.65)
    except:
        plt.scatter(tsne_df.iloc[:,0], tsne_df.iloc[:,1], cmap="Vega20", c=labels, alpha=0.65)

    plt.savefig(os.path.join(args.outdir,"labeled_tsne_kmeans.pdf"), bbox_inches="tight")

    miner.plotStates(states_df, tsne_df, numCols=8, numRows=9,
                     saveFile=os.path.join(args.outdir,
                                           "states_regulons_o2_tsne.pdf"),
                     size=10, aspect=1, scale=3)
